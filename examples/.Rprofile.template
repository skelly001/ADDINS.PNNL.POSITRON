# .Rprofile for sandbox-sync
# Place this file in your SCRIPT_PATH (r_script_sandbox root)
#
# This file runs on R session startup and performs initial sync between
# your scripts and data sandboxes.

# Function to perform sandbox sync on startup
.sandbox_sync_startup <- function() {
  # Get the directory where this .Rprofile is located
  # This should be the SCRIPT_PATH
  script_dir <- getwd()
  # message("Working directory when .Rprofile loaded: ", getwd())
  
  # Load .Renviron from the same directory
  renviron_path <- file.path(script_dir, ".Renviron")

  if (!file.exists(renviron_path)) {
    message("Warning: .Renviron not found in ", script_dir)
    message("Sandbox sync skipped. Please create .Renviron with SCRIPT_PATH and DATA_PATH")
    return(invisible(NULL))
  }

  # Load the .Renviron file
  readRenviron(renviron_path)

  # Read SCRIPT_PATH and DATA_PATH from environment
  scripts_path <- Sys.getenv("SCRIPT_PATH")
  data_path <- Sys.getenv("DATA_PATH")

  if (scripts_path == "" || data_path == "") {
    message("Warning: SCRIPT_PATH or DATA_PATH not defined in .Renviron")
    message("Sandbox sync skipped.")
    return(invisible(NULL))
  }

  # Check if SCRIPT_PATH contains "r_script_sandbox" as a whole word
  # Only run sync if WD is actually in r_script_sandbox
  if (!grepl("\\br_script_sandbox\\b", script_dir)) {
    message("Warning: SCRIPT_PATH does not contain 'r_script_sandbox' as whole word")
    message("Sandbox sync skipped for safety.")
    return(invisible(NULL))
  }

  # Find sandbox-sync binary
  # Try bundled binary first, then PATH
  binary_path <- Sys.which("sandbox-sync")

  if (binary_path == "") {
    message("Warning: sandbox-sync binary not found in PATH")
    message("Sandbox sync skipped. Please install sandbox-sync or add it to PATH.")
    return(invisible(NULL))
  }

  # Build command
  cmd <- sprintf(
    '%s sync-full --scripts "%s" --data "%s" --json',
    binary_path,
    scripts_path,
    data_path
  )

  # Run sync-full
  message("Running sandbox sync...")
  start_time <- Sys.time()

  result <- tryCatch({
    output <- system(cmd, intern = TRUE)
    output_str <- paste(output, collapse = "\n")

    # Try to parse JSON if jsonlite is available
    if (requireNamespace("jsonlite", quietly = TRUE)) {
      json <- jsonlite::fromJSON(output_str)

      if (json$ok) {
        duration <- round(as.numeric(Sys.time() - start_time, units = "secs") * 1000)
        message(sprintf(
          "Synced %d directories (%d created, %d existing) in %dms",
          json$created_total + json$existing_total,
          json$created_total,
          json$existing_total,
          json$duration_ms
        ))

        if (length(json$warnings) > 0) {
          for (warn in json$warnings) {
            message("  Warning: ", warn)
          }
        }
      } else {
        message("Sync failed:")
        for (err in json$errors) {
          message("  Error: ", err)
        }
      }
    } else {
      # jsonlite not available, just show raw output
      message(output_str)
    }

    TRUE
  }, error = function(e) {
    message("Sync error: ", e$message)
    FALSE
  })

  invisible(result)
}

# Run sync on startup
.sandbox_sync_startup()

# Clean up
rm(.sandbox_sync_startup)
